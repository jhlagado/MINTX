0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $0800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 06 0A               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 08 0A               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 0A 0A               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 0C 0A               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 0E 0A               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 10 0A               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 14 0A               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 16 0A               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 18 0A               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 1A 0A               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 0A               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 06 0A               LD   (RST08),HL   
0094   22 08 0A               LD   (RST10),HL   
0097   22 0A 0A               LD   (RST18),HL   
009A   22 0C 0A               LD   (RST20),HL   
009D   22 0E 0A               LD   (RST28),HL   
00A0   22 10 0A               LD   (RST30),HL   
00A3   22 14 0A               LD   (INTVEC),HL   
00A6   22 16 0A               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 18 0A               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 1A 0A               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   C3 18 02               JP   start   ; into #180 of the prog
00C6                             ; 
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;       MintX 1.0 Extended Minimal Interpreter for the Z80
00C6                             ; 
00C6                             ;       John Hardy
00C6                             ;       incorporates code by Ken Boak and Craig Jones
00C6                             ; 
00C6                             ;       GNU GENERAL PUBLIC LICENSE                   Version 3, 29 June 2007
00C6                             ; 
00C6                             ;       see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                TRUE:     EQU   -1   
00C6                FALSE:    EQU   0   
00C6                UNLIMITED:   EQU   -1   
00C6                CTRL_C:   EQU   3   
00C6                CTRL_E:   EQU   5   
00C6                CTRL_H:   EQU   8   
00C6                CTRL_L:   EQU   12   
00C6                CTRL_R:   EQU   18   
00C6                CTRL_S:   EQU   19   
00C6                BSLASH:   EQU   $5c   
00C6                .macro LITDAT,len
00C6                             ; 
00C6                 db len
00C6                .endm
00C6                 
00C6                .macro REPDAT,len,data
00C6                             ; 
00C6                 db (len | $80)
00C6                 db data
00C6                .endm
00C6                 
00C6                .macro ENDDAT,
00C6                             ; 
00C6                 db 0
00C6                .endm
00C6                 
00C6                             ; **************************************************************************
00C6                             ; Page 0  Initialisation
00C6                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put MintX code from here	
0180                             ; **************************************************************************
0180                             ; Macros must be written in MintX and end with ;
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                REEDIT_:      
0180   2F 7A 2F 5A 3B         DB   "/z/Z;"   ; remembers last line edited
0185                EDIT_:       
0185   60 3F 60 2F 4B 2F 50 2F 5A 3B 00 .CSTR   "`?`/K/P/Z;"   
0190                LIST_:       
0190   2F 4E 32 36 28 2F 69 36 35 2B 2F 5A 2F 6B 30 3E 28 2F 4E 29 29 2F 50 3B 00 .CSTR   "/N26(/i65+/Z/k0>(/N))/P;"   
01A9                PRINTSTACK_:      
01A9   60 3D 3E 20 60 2F 73 32 2D 20 2F 44 31 2D 28 22 2C 32 2D 29 27 2F 4E 2F 50 3B 00 .CSTR   "`=> `/s2- /D1-(",$22,",2-)'/N/P;"   
01C4                IOPCODES:      
01C4                          ;*Macro unroll:  LITDAT 15
01C4   0F                     DB   15   
01C5   1D                     DB   lsb(bang_)   ;   !
01C6   71                     DB   lsb(dquote_)   ;   "
01C7   F8                     DB   lsb(hash_)   ;   #
01C8   9C                     DB   lsb(dollar_)   ;   $
01C9   79                     DB   lsb(percent_)   ;   %
01CA   2D                     DB   lsb(amper_)   ;   &
01CB   02                     DB   lsb(quote_)   ;   '
01CC   F3                     DB   lsb(lparen_)   ;   (
01CD   EA                     DB   lsb(rparen_)   ;   )
01CE   FA                     DB   lsb(star_)   ;   *
01CF   4F                     DB   lsb(plus_)   ;   +
01D0   6B                     DB   lsb(comma_)   ;   ,
01D1   A0                     DB   lsb(minus_)   ;   -
01D2   60                     DB   lsb(dot_)   ;   .
01D3   FC                     DB   lsb(slash_)   ;   /	
01D4                          ;*Macro unroll:  REPDAT 10, lsb(num_)	; 10 x repeat lsb of add to the num routine
01D4   8A                     DB   (10 | $80)   ; 10 x repeat lsb of add to the num routine
01D5   E7                     DB   lsb(num_)   
01D6                          ;*Macro unroll:  LITDAT 7
01D6   07                     DB   7   
01D7   F0                     DB   lsb(colon_)   ;    :
01D8   80                     DB   lsb(semi_)   ;    ;
01D9   C4                     DB   lsb(lt_)   ;    <
01DA   B5                     DB   lsb(eq_)   ;    =
01DB   C0                     DB   lsb(gt_)   ;    >
01DC   F6                     DB   lsb(question_)   ;    ?
01DD   03                     DB   lsb(at_)   ;    @
01DE                          ;*Macro unroll:  REPDAT 26, lsb(call_)	; call a command a, B ....Z
01DE   9A                     DB   (26 | $80)   ; call a command a, B ....Z
01DF   56                     DB   lsb(call_)   
01E0                          ;*Macro unroll:  LITDAT 6
01E0   06                     DB   6   
01E1   DE                     DB   lsb(lbrack_)   ;    [
01E2   00                     DB   lsb(bslash_)   ;    \
01E3   ED                     DB   lsb(rbrack_)   ;    ]
01E4   41                     DB   lsb(caret_)   ;    ^
01E5   03                     DB   lsb(underscore_)   ;    _
01E6   CF                     DB   lsb(grave_)   ;    `   ; for printing `hello`
01E7                          ;*Macro unroll:  REPDAT 26, lsb(var_)	; a b c .....z
01E7   9A                     DB   (26 | $80)   ; a b c .....z
01E8   05                     DB   lsb(var_)   
01E9                          ;*Macro unroll:  LITDAT 4
01E9   04                     DB   4   
01EA   91                     DB   lsb(lbrace_)   ;    {
01EB   38                     DB   lsb(pipe_)   ;    |
01EC   95                     DB   lsb(rbrace_)   ;    }
01ED   4A                     DB   lsb(tilde_)   ;    ~ ( a b c -- b c a ) rotate
01EE                IALTCODES:      
01EE                          ;*Macro unroll:  LITDAT 26
01EE   1A                     DB   26   
01EF   00                     DB   lsb(alloc_)   ;A      allocate some heap memory
01F0   09                     DB   lsb(aNop_)   ;B
01F1   34                     DB   lsb(printChar_)   ;C      print a char
01F2   23                     DB   lsb(depth_)   ;D      depth of stack
01F3   3B                     DB   lsb(else_)   ;E      else
01F4   31                     DB   lsb(falsex_)   ;F      false condition
01F5   53                     DB   lsb(go_)   ;G      go execute MintX code
01F6   09                     DB   lsb(aNop_)   ;H
01F7   70                     DB   lsb(inPort_)   ;I      input from port
01F8   09                     DB   lsb(aNop_)   ;J
01F9   68                     DB   lsb(key_)   ;K      read a char from input
01FA   09                     DB   lsb(aNop_)   ;L
01FB   09                     DB   lsb(aNop_)   ;M
01FC   7A                     DB   lsb(newln_)   ;N      prints a newline to output
01FD   7F                     DB   lsb(outPort_)   ;O      output to port
01FE   4E                     DB   lsb(prompt_)   ;P      print MintX prompt
01FF   09                     DB   lsb(aNop_)   ;Q
0200   09                     DB   lsb(aNop_)   ;R
0201   0B                     DB   lsb(arrSize_)   ;S      array size
0202   88                     DB   lsb(truex_)   ;T      true condition
0203   8B                     DB   lsb(unlimit_)   ;U      unlimited loop
0204   90                     DB   lsb(varAccess_)   ;V      address of last access
0205   13                     DB   lsb(while_)   ;W      conditional break from loop
0206   41                     DB   lsb(exec_)   ;X      execute machine code
0207   09                     DB   lsb(aNop_)   ;Y
0208   49                     DB   lsb(editDef_)   ;Z      edit line
0209                          ;*Macro unroll:  ENDDAT
0209   00                     DB   0   
020A                BACKSPACE:      
020A   79                     LD   a,c   
020B   B0                     OR   b   
020C   28 28                  JR   z,interpret2   
020E   0B                     DEC   bc   
020F   CD A1 03               CALL   printStr   
0212   08 20 08 00            .CSTR   "\b \b"   
0216   18 1E                  JR   interpret2   
0218                START:       
0218   31 00 0A               LD   SP,DSTACK   ; start of MintX
021B   CD E9 02               CALL   init   ; setups
021E   CD A1 03               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
0221   4D 69 6E 74 58 32 2E 30 0D 0A 00 .CSTR   "MintX2.0\r\n"   
022C                INTERPRET:      
022C   CD 91 03               CALL   prompt   
022F   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
0232   ED 43 7C 0C            LD   (vTIBPtr),bc   
0236                INTERPRET2:      ; calc nesting (a macro might have changed it)
0236   1E 00                  LD   E,0   ; initilize nesting value
0238   C5                     PUSH   bc   ; save offset into TIB,
0239                             ; bc is also the count of chars in TIB
0239   21 00 08               LD   hl,TIB   ; hl is start of TIB
023C   18 06                  JR   interpret4   
023E                INTERPRET3:      
023E   7E                     LD   a,(hl)   ; A = char in TIB
023F   23                     INC   hl   ; inc pointer into TIB
0240   0B                     DEC   bc   ; dec count of chars in TIB
0241   CD 6A 03               CALL   nesting   ; update nesting value
0244                INTERPRET4:      
0244   79                     LD   a,C   ; is count zero?
0245   B0                     OR   B   
0246   20 F6                  JR   NZ,interpret3   ; if not loop
0248   C1                     POP   bc   ; restore offset into TIB
0249                WAITCHAR:      
0249   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
024C   FE 20                  CP   $20   ; compare to space
024E   30 39                  JR   NC,waitchar1   ; if >= space, if below 20 set cary flag
0250   FE 00                  CP   $0   ; is it end of string? null end of string
0252   28 59                  JR   Z,waitchar4   
0254   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0256   28 3F                  JR   Z,waitchar3   ; if anything else its macro/control
0258   FE 08                  CP   CTRL_H   
025A   28 AE                  JR   z,backSpace   
025C   16 01                  LD   d,msb(macros)   
025E   FE 05                  CP   CTRL_E   
0260   1E 85                  LD   e,lsb(edit_)   
0262   28 14                  JR   z,macro   
0264   FE 12                  CP   CTRL_R   
0266   1E 80                  LD   e,lsb(reedit_)   
0268   28 0E                  JR   z,macro   
026A   FE 0C                  CP   CTRL_L   
026C   1E 90                  LD   e,lsb(list_)   
026E   28 08                  JR   z,macro   
0270   FE 13                  CP   CTRL_S   
0272   1E A9                  LD   e,lsb(printStack_)   
0274   28 02                  JR   z,macro   
0276   18 BE                  JR   interpret2   
0278                MACRO:       
0278   ED 43 7C 0C            LD   (vTIBPtr),bc   
027C   D5                     PUSH   de   
027D   CD CC 03               CALL   ENTER   ;MintX go operation and jump to it
0280   2F 47 00               .CSTR   "/G"   
0283   ED 4B 7C 0C            LD   bc,(vTIBPtr)   
0287   18 AD                  JR   interpret2   
0289                WAITCHAR1:      
0289   21 00 08               LD   hl,TIB   
028C   09                     ADD   hl,bc   
028D   77                     LD   (hl),A   ; store the character in textbuf
028E   03                     INC   bc   
028F   CD 85 00               CALL   putchar   ; echo character to screen
0292   CD 6A 03               CALL   nesting   
0295   18 B2                  JR   waitchar   ; wait for next character
0297                WAITCHAR3:      
0297   21 00 08               LD   hl,TIB   
029A   09                     ADD   hl,bc   
029B   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
029D   23                     INC   hl   
029E   36 0A                  LD   (hl),"\n"   
02A0   23                     INC   hl   ; ????
02A1   03                     INC   bc   
02A2   03                     INC   bc   
02A3   CD 9A 03               CALL   crlf   ; echo character to screen
02A6   7B                     LD   a,E   ; if zero nesting append and ETX after \r
02A7   B7                     OR   A   
02A8   20 9F                  JR   NZ,waitchar   
02AA   36 03                  LD   (hl),$03   ; store end of text ETX in text buffer
02AC   03                     INC   bc   
02AD                WAITCHAR4:      
02AD   ED 43 7C 0C            LD   (vTIBPtr),bc   
02B1   01 00 08               LD   bc,TIB   ; Instructions stored on heap at address HERE, we pressed enter
02B4   0B                     DEC   bc   
02B5                NEXT:        
02B5   03                     INC   bc   ; Increment the IP
02B6   0A                     LD   a,(bc)   ; Get the next character and dispatch
02B7   B7                     OR   a   ; is it NUL?
02B8   28 0F                  JR   z,exit   
02BA   FE 03                  CP   CTRL_C   
02BC   28 1F                  JR   z,etx   
02BE   D6 21                  SUB   "!"   
02C0   38 F3                  JR   c,NEXT   
02C2   6F                     LD   L,A   ; Index into table
02C3   26 0B                  LD   H,msb(opcodes)   ; Start address of jump table
02C5   6E                     LD   L,(hl)   ; get low jump address
02C6   26 04                  LD   H,msb(page4)   ; Load H with the 1st page address
02C8   E9                     JP   (hl)   ; Jump to routine
02C9                EXIT:        
02C9   03                     INC   bc   ; store offests into a table of bytes, smaller
02CA   50 59                  LD   de,bc   
02CC   DD 2A 9C 0C            LD   ix,(vBasePtr)   ; 
02D0   CD BC 03               CALL   rpop   ; Restore old base pointer
02D3   22 9C 0C               LD   (vBasePtr),hl   
02D6   CD BC 03               CALL   rpop   ; Restore Instruction pointer
02D9   44 4D                  LD   bc,hl   
02DB   EB                     EX   de,hl   
02DC   E9                     JP   (hl)   
02DD                ETX:         
02DD   21 00 F6               LD   hl,-DSTACK   ; check if stack pointer is underwater
02E0   39                     ADD   hl,SP   
02E1   30 03                  JR   NC,etx1   
02E3   31 00 0A               LD   SP,DSTACK   
02E6                ETX1:        
02E6   C3 2C 02               JP   interpret   
02E9                INIT:        
02E9   DD 21 80 09            LD   IX,RSTACK   
02ED   DD 22 9C 0C            LD   (vBasePtr),IX   
02F1   FD 21 B5 02            LD   IY,NEXT   ; IY provides a faster jump to NEXT
02F5   21 00 0C               LD   hl,vars   
02F8   54 5D                  LD   de,hl   
02FA   13                     INC   de   
02FB   36 00                  LD   (hl),0   
02FD   01 9C 00               LD   bc,VARS_SIZE * 3   ; init vars, defs and altVars
0300   ED B0                  LDIR      
0302   21 00 0A               LD   hl,dStack   
0305   22 8C 0C               LD   (vStkStart),hl   
0308   21 41 00               LD   hl,65   
030B   22 9A 0C               LD   (vLastDef),hl   
030E   21 A2 0C               LD   hl,HEAP   
0311   22 76 0C               LD   (vHeapPtr),hl   
0314                INITOPS:      
0314   21 C4 01               LD   hl,iOpcodes   
0317   11 00 0B               LD   de,opcodes   
031A   01 78 00               LD   bc,$80-32-1-1+26   
031D                INITOPS1:      
031D   7E                     LD   a,(hl)   
031E   23                     INC   hl   
031F   CB 27                  SLA   A   
0321   C8                     RET   Z   
0322   38 09                  JR   C,initOps2   
0324   CB 3F                  SRL   A   
0326   4F                     LD   C,A   
0327   06 00                  LD   B,0   
0329   ED B0                  LDIR      
032B   18 F0                  JR   initOps1   
032D                INITOPS2:      
032D   CB 3F                  SRL   A   
032F   47                     LD   B,A   
0330   7E                     LD   a,(hl)   
0331   23                     INC   hl   
0332                INITOPS2A:      
0332   12                     LD   (de),A   
0333   13                     INC   de   
0334   10 FC                  DJNZ   initOps2a   
0336   18 E5                  JR   initOps1   
0338                LOOKUPREF0:      
0338   21 34 0C               LD   hl,defs   
033B   D6 41                  SUB   "A"   
033D   18 02                  JR   lookupRef1   
033F                LOOKUPREF:      
033F   D6 61                  SUB   "a"   
0341                LOOKUPREF1:      
0341   87                     ADD   a,a   
0342   85                     ADD   a,l   
0343   6F                     LD   l,a   
0344   3E 00                  LD   a,0   
0346   8C                     ADC   a,h   
0347   67                     LD   h,a   
0348   AF                     XOR   a   
0349   B3                     OR   e   ; sets Z flag if A-Z
034A   C9                     RET      
034B                PRINTHEX:      
034B                             ; Display hl as a 16-bit number in hex.
034B   C5                     PUSH   bc   ; preserve the IP
034C   7C                     LD   a,H   
034D   CD 56 03               CALL   printhex2   
0350   7D                     LD   a,L   
0351   CD 56 03               CALL   printhex2   
0354   C1                     POP   bc   
0355   C9                     RET      
0356                PRINTHEX2:      
0356   4F                     LD   C,A   
0357   1F                     RRA      
0358   1F                     RRA      
0359   1F                     RRA      
035A   1F                     RRA      
035B   CD 5F 03               CALL   printhex3   
035E   79                     LD   a,C   
035F                PRINTHEX3:      
035F   E6 0F                  AND   0x0F   
0361   C6 90                  ADD   a,0x90   
0363   27                     DAA      
0364   CE 40                  ADC   a,0x40   
0366   27                     DAA      
0367   C3 85 00               JP   putchar   
036A                             ; **************************************************************************
036A                             ; calculate nesting value
036A                             ; A is char to be tested,
036A                             ; E is the nesting value (initially 0)
036A                             ; E is increased by ( and [
036A                             ; E is decreased by ) and ]
036A                             ; E has its bit 7 toggled by `
036A                             ; limited to 127 levels
036A                             ; **************************************************************************
036A                NESTING:      
036A   FE 60                  CP   "`"   
036C   20 05                  JR   NZ,nesting1   
036E   3E 80                  LD   a,$80   
0370   AB                     XOR   e   
0371   5F                     LD   e,a   
0372   C9                     RET      
0373                NESTING1:      
0373   CB 7B                  BIT   7,E   
0375   C0                     RET   NZ   
0376   FE 3A                  CP   ":"   
0378   28 08                  JR   Z,nesting2   
037A   FE 5B                  CP   "["   
037C   28 04                  JR   Z,nesting2   
037E   FE 28                  CP   "("   
0380   20 02                  JR   NZ,nesting3   
0382                NESTING2:      
0382   1C                     INC   E   
0383   C9                     RET      
0384                NESTING3:      
0384   FE 3B                  CP   ";"   
0386   28 07                  JR   Z,nesting4   
0388   FE 5D                  CP   "]"   
038A   28 03                  JR   Z,nesting4   
038C   FE 29                  CP   ")"   
038E   C0                     RET   NZ   
038F                NESTING4:      
038F   1D                     DEC   E   
0390   C9                     RET      
0391                PROMPT:      
0391   CD A1 03               CALL   printStr   
0394   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0399   C9                     RET      
039A                CRLF:        
039A   CD A1 03               CALL   printStr   
039D   0D 0A 00               .CSTR   "\r\n"   
03A0   C9                     RET      
03A1                PRINTSTR:      
03A1   E3                     EX   (SP),hl   ; swap			
03A2   CD AC 03               CALL   putStr   
03A5   23                     INC   hl   ; inc past null
03A6   E3                     EX   (SP),hl   ; put it back	
03A7   C9                     RET      
03A8                PUTSTR0:      
03A8   CD 85 00               CALL   putchar   
03AB   23                     INC   hl   
03AC                PUTSTR:      
03AC   7E                     LD   a,(hl)   
03AD   B7                     OR   A   
03AE   20 F8                  JR   NZ,putStr0   
03B0   C9                     RET      
03B1                RPUSH:       
03B1   DD 2B                  DEC   IX   
03B3   DD 74 00               LD   (IX+0),H   
03B6   DD 2B                  DEC   IX   
03B8   DD 75 00               LD   (IX+0),L   
03BB   C9                     RET      
03BC                RPOP:        
03BC   DD 6E 00               LD   L,(IX+0)   
03BF   DD 23                  INC   IX   
03C1   DD 66 00               LD   H,(IX+0)   
03C4   DD 23                  INC   IX   
03C6                RPOP2:       
03C6   C9                     RET      
03C7                WRITECHAR:      
03C7   77                     LD   (hl),A   
03C8   23                     INC   hl   
03C9   C3 85 00               JP   putchar   
03CC                ENTER:       
03CC   60 69                  LD   hl,bc   
03CE   CD B1 03               CALL   rpush   ; save Instruction Pointer
03D1   2A 9C 0C               LD   hl,(vBasePtr)   
03D4   CD B1 03               CALL   rpush   
03D7   DD 22 9C 0C            LD   (vBasePtr),ix   
03DB   C1                     POP   bc   
03DC   0B                     DEC   bc   
03DD   FD E9                  JP   (iy)   
03DF                CARRY:       
03DF   21 00 00               LD   hl,0   
03E2   CB 15                  RL   l   
03E4   22 6C 0C               LD   (vCarry),hl   
03E7   FD E9                  JP   (iy)   
03E9                FALSE_:      
03E9   21 00 00               LD   hl,FALSE   
03EC   18 03                  JR   true1   
03EE                TRUE_:       
03EE   21 FF FF               LD   hl,TRUE   
03F1                TRUE1:       
03F1   E5                     PUSH   hl   
03F2   FD E9                  JP   (iy)   
03F4                SETBYTEMODE:      
03F4   3E FF                  LD   a,$FF   
03F6   18 01                  JR   assignByteMode   
03F8                RESETBYTEMODE:      
03F8   AF                     XOR   a   
03F9                ASSIGNBYTEMODE:      
03F9   32 6A 0C               LD   (vByteMode),a   
03FC   FD E9                  JP   (iy)   
03FE                             ; **********************************************************************			
03FE                             ; Page 4 primitive routines
03FE                             ; **********************************************************************
03FE                          ALIGN   $100   
0400                PAGE4:       
0400                BSLASH_:      
0400   18 F2                  JR   setByteMode   
0402                QUOTE_:      ; Discard the top member of the stack
0402   E1                     POP   hl   
0403                AT_:         
0403                UNDERSCORE_:      
0403   FD E9                  JP   (iy)   
0405                VAR_:        
0405   0A                     LD   a,(bc)   
0406   21 00 0C               LD   hl,vars   
0409   CD 3F 03               CALL   lookupRef   
040C                VAR1:        
040C   22 9E 0C               LD   (vPointer),hl   
040F   16 00                  LD   d,0   
0411   5E                     LD   e,(hl)   
0412   3A 6A 0C               LD   a,(vByteMode)   
0415   3C                     INC   a   ; is it byte?
0416   28 02                  JR   z,var2   
0418   23                     INC   hl   
0419   56                     LD   d,(hl)   
041A                VAR2:        
041A   D5                     PUSH   de   
041B   18 DB                  JR   resetByteMode   
041D                BANG_:       ; Store the value at the address placed on the top of the stack
041D                ASSIGN:      
041D   E1                     POP   hl   ; discard value of last accessed variable
041E   D1                     POP   de   ; new value
041F   2A 9E 0C               LD   hl,(vPointer)   
0422   73                     LD   (hl),e   
0423   3A 6A 0C               LD   a,(vByteMode)   
0426   3C                     INC   a   ; is it byte?
0427   28 02                  JR   z,assign1   
0429   23                     INC   hl   
042A   72                     LD   (hl),d   
042B                ASSIGN1:      
042B   18 CB                  JR   resetByteMode   
042D                AMPER_:      
042D   D1                     POP   de   ;     Bitwise and the top 2 elements of the stack
042E   E1                     POP   hl   
042F   7B                     LD   a,E   
0430   A5                     AND   L   
0431   6F                     LD   L,A   
0432   7A                     LD   a,D   
0433   A4                     AND   H   
0434                AND1:        
0434   67                     LD   h,a   
0435                AND2:        
0435   E5                     PUSH   hl   
0436   FD E9                  JP   (iy)   
0438                PIPE_:       
0438   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
0439   E1                     POP   hl   
043A   7B                     LD   a,E   
043B   B5                     OR   L   
043C   6F                     LD   L,A   
043D   7A                     LD   a,D   
043E   B4                     OR   h   
043F   18 F3                  JR   and1   
0441                CARET_:      
0441   D1                     POP   de   ; Bitwise XOR the top 2 elements of the stack
0442                XOR1:        
0442   E1                     POP   hl   
0443   7B                     LD   a,E   
0444   AD                     XOR   L   
0445   6F                     LD   L,A   
0446   7A                     LD   a,D   
0447   AC                     XOR   H   
0448   18 EA                  JR   and1   
044A                TILDE_:      
044A                INVERT:      ; Bitwise INVert the top member of the stack
044A   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
044D   18 F3                  JR   xor1   
044F                PLUS_:       ; add the top 2 members of the stack
044F   D1                     POP   de   
0450   E1                     POP   hl   
0451   19                     ADD   hl,de   
0452   E5                     PUSH   hl   
0453   C3 DF 03               JP   carry   
0456                CALL_:       
0456   0A                     LD   a,(bc)   
0457   CD 38 03               CALL   lookupRef0   
045A   5E                     LD   E,(hl)   
045B   23                     INC   hl   
045C   56                     LD   D,(hl)   
045D   C3 54 07               JP   go1   
0460                DOT_:        
0460   E1                     POP   hl   
0461   CD C9 07               CALL   printDec   
0464                DOT2:        
0464   3E 20                  LD   a," "   
0466   CD 85 00               CALL   putChar   
0469   FD E9                  JP   (iy)   
046B                COMMA_:      ; print hexadecimal
046B   E1                     POP   hl   
046C   CD 4B 03               CALL   printhex   
046F   18 F3                  JR   dot2   
0471                DQUOTE_:      
0471   E1                     POP   hl   ; Duplicate the top member of the stack
0472   E5                     PUSH   hl   
0473   E5                     PUSH   hl   
0474   FD E9                  JP   (iy)   
0476   C3 B5 02               JP   NEXT   ; hardwire white space to always go to NEXT (important for arrays)
0479                PERCENT_:      
0479   E1                     POP   hl   ; Duplicate 2nd element of the stack
047A   D1                     POP   de   
047B   D5                     PUSH   de   
047C   E5                     PUSH   hl   
047D   D5                     PUSH   de   ; and push it to top of stack
047E   FD E9                  JP   (iy)   
0480                SEMI_:       
0480   DD 2A 9C 0C            LD   ix,(vBasePtr)   ; 
0484   CD BC 03               CALL   rpop   ; Restore old base pointer
0487   22 9C 0C               LD   (vBasePtr),hl   
048A   CD BC 03               CALL   rpop   ; Restore Instruction pointer
048D   44 4D                  LD   bc,hl   
048F   FD E9                  JP   (iy)   
0491                             ;  Left shift { is multiply by 2		
0491                LBRACE_:      
0491   E1                     POP   hl   ; Duplicate the top member of the stack
0492   29                     ADD   hl,hl   
0493   18 A0                  JR   and2   ; shift left fallthrough into plus_
0495                             ;  Right shift } is a divide by 2		
0495                RBRACE_:      
0495   E1                     POP   hl   ; Get the top member of the stack
0496                SHR1:        
0496   CB 3C                  SRL   H   
0498   CB 1D                  RR   L   
049A   18 99                  JR   and2   
049C                             ; $ swap                    ; a b -- b a Swap the top 2 elements of the stack
049C                DOLLAR_:      
049C   E1                     POP   hl   
049D   E3                     EX   (SP),hl   
049E   18 95                  JR   and2   
04A0                MINUS_:      ; Subtract the value 2nd on stack from top of stack
04A0   03                     INC   bc   ; check if sign of a number
04A1   0A                     LD   a,(bc)   
04A2   0B                     DEC   bc   
04A3   FE 30                  CP   "0"   
04A5   38 05                  JR   c,sub1   
04A7   FE 3A                  CP   "9"+1   
04A9   DA 3E 08               JP   c,num   
04AC                SUB1:        
04AC   D1                     POP   de   
04AD   E1                     POP   hl   
04AE                SUB2:        
04AE   A7                     AND   A   
04AF   ED 52                  SBC   hl,de   
04B1   E5                     PUSH   hl   
04B2   C3 DF 03               JP   carry   
04B5                EQ_:         
04B5   E1                     POP   hl   
04B6   D1                     POP   de   
04B7   B7                     OR   a   ; reset the carry flag
04B8   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
04BA   CA EE 03               JP   z,true_   
04BD   C3 E9 03               JP   false_   
04C0                GT_:         
04C0   E1                     POP   hl   
04C1   D1                     POP   de   
04C2   18 02                  JR   lt1_   
04C4                LT_:         
04C4   D1                     POP   de   
04C5   E1                     POP   hl   
04C6                LT1_:        
04C6   B7                     OR   a   ; reset the carry flag
04C7   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
04C9   DA EE 03               JP   c,true_   
04CC   C3 E9 03               JP   false_   
04CF                GRAVE_:      
04CF                STR:         
04CF   03                     INC   bc   
04D0                STR1:        
04D0   0A                     LD   a,(bc)   
04D1   03                     INC   bc   
04D2   FE 60                  CP   "`"   ; ` is the string terminator
04D4   28 05                  JR   Z,str2   
04D6   CD 85 00               CALL   putchar   
04D9   18 F5                  JR   str1   
04DB                STR2:        
04DB   0B                     DEC   bc   
04DC   FD E9                  JP   (IY)   
04DE                LBRACK_:      
04DE                ARRDEF:      
04DE   21 00 00               LD   hl,0   
04E1   39                     ADD   hl,sp   ; save
04E2   CD B1 03               CALL   rpush   
04E5   FD E9                  JP   (iy)   
04E7                NUM_:        
04E7   C3 3E 08               JP   num   
04EA                RPAREN_:      
04EA   C3 CE 05               JP   again   ; close loop
04ED                RBRACK_:      
04ED   C3 6E 08               JP   arrEnd   
04F0                COLON_:      
04F0   C3 11 08               JP   def   
04F3                LPAREN_:      
04F3   C3 94 05               JP   begin   
04F6                QUESTION_:      
04F6   18 50                  JR   arrAccess   
04F8                HASH_:       
04F8   18 5B                  JR   hex   
04FA                STAR_:       
04FA   18 78                  JR   mul   
04FC                SLASH_:      
04FC                ALT_:        ; falls through (must be on page 4)
04FC                             ;*******************************************************************
04FC                             ; Page 5 primitive routines
04FC                             ;*******************************************************************
04FC                ALT:         
04FC   03                     INC   bc   
04FD   0A                     LD   a,(bc)   
04FE   FE 7B                  CP   "z"+1   
0500   30 0C                  JR   nc,alt1   
0502   FE 61                  CP   "a"   
0504   30 0C                  JR   nc,altVar   
0506   FE 5B                  CP   "Z"+1   
0508   30 04                  JR   nc,alt1   
050A   FE 41                  CP   "A"   
050C   30 2D                  JR   nc,altCode   
050E                ALT1:        
050E   0B                     DEC   bc   
050F   C3 B7 08               JP   div   
0512                ALTVAR:      
0512   FE 69                  CP   "i"   
0514   2E 00                  LD   l,0   
0516   CA 28 05               JP   z,loopVar   
0519   FE 6A                  CP   "j"   
051B   2E 08                  LD   l,8   
051D   28 09                  JR   z,loopVar   
051F   21 68 0C               LD   hl,altVars   
0522   CD 3F 03               CALL   lookupRef   
0525   C3 0C 04               JP   var1   
0528                LOOPVAR:      
0528   26 00                  LD   h,0   
052A   DD 54                  LD   d,ixh   
052C   DD 5D                  LD   e,ixl   
052E   19                     ADD   hl,de   
052F   C3 0C 04               JP   var1   
0532                COMMENT:      
0532   03                     INC   bc   ; point to next char
0533   0A                     LD   a,(bc)   
0534   FE 0D                  CP   "\r"   ; terminate at cr
0536   20 FA                  JR   NZ,comment   
0538   0B                     DEC   bc   
0539   FD E9                  JP   (IY)   
053B                ALTCODE:      
053B   21 5E 0B               LD   hl,altCodes   
053E   D6 41                  SUB   "A"   
0540   85                     ADD   a,L   
0541   6F                     LD   L,A   
0542   7E                     LD   a,(hl)   ;       get low jump address
0543   21 00 07               LD   hl,page6   
0546   6F                     LD   L,A   
0547   E9                     JP   (hl)   ;       Jump to routine
0548                ARRACCESS:      
0548   E1                     POP   hl   ; hl = index
0549   D1                     POP   de   ; de = array
054A   3A 6A 0C               LD   a,(vByteMode)   ; a = data width
054D   3C                     INC   a   
054E   28 01                  JR   z,arrAccess1   
0550   29                     ADD   hl,hl   ; if data width = 2 then double
0551                ARRACCESS1:      
0551   19                     ADD   hl,de   ; hl = addr
0552   C3 0C 04               JP   var1   
0555                HEX:         
0555   21 00 00               LD   hl,0   ; Clear hl to accept the number
0558                HEX1:        
0558   03                     INC   bc   
0559   0A                     LD   a,(bc)   ; Get the character which is a numeral
055A   CB 77                  BIT   6,A   ; is it uppercase alpha?
055C   CA 61 05               JP   Z,hex2   ; no a decimal
055F   D6 07                  SUB   7   ; sub 7  to make $A - $F
0561                HEX2:        
0561   D6 30                  SUB   $30   ; Form decimal digit
0563   DA 60 08               JP   C,num2   
0566   FE 10                  CP   $0F+1   
0568   D2 60 08               JP   NC,num2   
056B   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
056C   29                     ADD   hl,hl   ; 4X
056D   29                     ADD   hl,hl   ; 8X
056E   29                     ADD   hl,hl   ; 16X
056F   85                     ADD   a,L   ; add into bottom of hl
0570   6F                     LD   L,A   
0571   C3 58 05               JP   hex1   
0574                MUL:         
0574   D1                     POP   de   ; de = 2nd arg
0575   E1                     POP   hl   ; hl = 1st arg
0576   C5                     PUSH   bc   ; save IP
0577   7D                     LD   a,l   
0578   4C                     LD   c,h   
0579   06 10                  LD   b,16   
057B   21 00 00               LD   hl,0   
057E                MUL1:        
057E   29                     ADD   hl,hl   
057F   17                     RLA      
0580   CB 11                  RL   c   
0582   30 07                  JR   nc,mul2   
0584   19                     ADD   hl,de   
0585   CE 00                  ADC   a,0   
0587   D2 8B 05               JP   nc,mul2   
058A   0C                     INC   c   
058B                MUL2:        
058B   10 F1                  DJNZ   mul1   
058D   EB                     EX   de,hl   ; de = lsw result
058E   61                     LD   h,c   
058F   6F                     LD   l,a   ; hl = msw result
0590   C1                     POP   bc   ; restore IP
0591   C3 F8 08               JP   divExit   ; pushes lsw, puts msw in vRemain
0594                BEGIN:       
0594                LOOPSTART:      
0594   ED 43 02 0A            LD   (vTemp1),bc   ; save start
0598   1E 01                  LD   e,1   ; skip to loop end, nesting = 1
059A                LOOPSTART1:      
059A   03                     INC   bc   
059B   0A                     LD   a,(bc)   
059C   CD 6A 03               CALL   nesting   ; affects zero flag
059F   20 F9                  JR   nz,loopStart1   
05A1   D1                     POP   de   ; de = limit
05A2   7B                     LD   a,e   ; is it zero?
05A3   B2                     OR   d   
05A4   20 07                  JR   nz,loopStart2   
05A6   1B                     DEC   de   ; de = TRUE
05A7   ED 53 A0 0C            LD   (vElse),de   
05AB   18 1F                  JR   loopStart4   ; yes continue after skip
05AD                LOOPSTART2:      
05AD   3E 02                  LD   a,2   ; is it TRUE
05AF   83                     ADD   a,e   
05B0   82                     ADD   a,d   
05B1   20 03                  JR   nz,loopStart3   
05B3   11 01 00               LD   de,1   ; yes make it 1
05B6                LOOPSTART3:      
05B6   60 69                  LD   hl,bc   
05B8   CD B1 03               CALL   rpush   ; rpush loop end
05BB   0B                     DEC   bc   ; IP points to ")"
05BC   2A 02 0A               LD   hl,(vTemp1)   ; restore start
05BF   CD B1 03               CALL   rpush   ; rpush start
05C2   EB                     EX   de,hl   ; hl = limit
05C3   CD B1 03               CALL   rpush   ; rpush limit
05C6   21 FF FF               LD   hl,-1   ; hl = count = -1
05C9   CD B1 03               CALL   rpush   ; rpush count
05CC                LOOPSTART4:      
05CC   FD E9                  JP   (iy)   
05CE                AGAIN:       
05CE                LOOPEND:      
05CE   DD 5E 02               LD   e,(ix+2)   ; de = limit
05D1   DD 56 03               LD   d,(ix+3)   
05D4   7B                     LD   a,e   ; a = lsb(limit)
05D5   B2                     OR   d   ; if limit 0 exit loop
05D6   28 2B                  JR   z,loopEnd4   
05D8   13                     INC   de   ; is limit -2
05D9   13                     INC   de   
05DA   7B                     LD   a,e   ; a = lsb(limit)
05DB   B2                     OR   d   ; if limit 0 exit loop
05DC   28 09                  JR   z,loopEnd2   ; yes, loop again
05DE   1B                     DEC   de   
05DF   1B                     DEC   de   
05E0   1B                     DEC   de   
05E1   DD 73 02               LD   (ix+2),e   
05E4   DD 72 03               LD   (ix+3),d   
05E7                LOOPEND2:      
05E7   DD 5E 00               LD   e,(ix+0)   ; inc counter
05EA   DD 56 01               LD   d,(ix+1)   
05ED   13                     INC   de   
05EE   DD 73 00               LD   (ix+0),e   
05F1   DD 72 01               LD   (ix+1),d   
05F4                LOOPEND3:      
05F4   11 00 00               LD   de,FALSE   ; if clause ran then vElse = FALSE
05F7   ED 53 A0 0C            LD   (vElse),de   
05FB   DD 4E 04               LD   c,(ix+4)   ; IP = start
05FE   DD 46 05               LD   b,(ix+5)   
0601   FD E9                  JP   (iy)   
0603                LOOPEND4:      
0603   11 08 00               LD   de,2*4   ; rpop frame
0606   DD 19                  ADD   ix,de   
0608   FD E9                  JP   (iy)   
060A                             ; **************************************************************************
060A                             ; Page 6 Alt primitives
060A                             ; **************************************************************************
060A                          ALIGN   $100   
0700                PAGE6:       
0700                             ; allocates raw heap memory in bytes (ignores byte mode)
0700                             ; n -- a
0700                ALLOC_:      
0700   D1                     POP   de   
0701   2A 76 0C               LD   hl,(vHeapPtr)   
0704   E5                     PUSH   hl   
0705   19                     ADD   hl,de   
0706   22 76 0C               LD   (vHeapPtr),hl   
0709                ANOP_:       
0709   FD E9                  JP   (iy)   
070B                             ; returns the size of an array
070B                             ; a -- n
070B                ARRSIZE_:      
070B                ARRSIZE:      
070B   E1                     POP   hl   
070C   2B                     DEC   hl   ; msb size
070D   56                     LD   d,(hl)   
070E   2B                     DEC   hl   ; lsb size
070F   5E                     LD   e,(hl)   
0710   D5                     PUSH   de   
0711   FD E9                  JP   (iy)   
0713                BREAK_:      
0713                WHILE_:      
0713                WHILE:       
0713   E1                     POP   hl   
0714   7D                     LD   a,l   
0715   B4                     OR   h   
0716   20 09                  JR   nz,while2   
0718   DD 4E 06               LD   c,(ix+6)   ; IP = )
071B   DD 46 07               LD   b,(ix+7)   
071E   C3 03 06               JP   loopEnd4   
0721                WHILE2:      
0721   FD E9                  JP   (iy)   
0723                DEPTH_:      
0723                DEPTH:       
0723   21 00 00               LD   hl,0   
0726   39                     ADD   hl,SP   
0727   EB                     EX   de,hl   
0728   21 00 0A               LD   hl,DSTACK   
072B   B7                     OR   A   
072C   ED 52                  SBC   hl,de   
072E   C3 96 04               JP   shr1   
0731                FALSEX_:      
0731   C3 E9 03               JP   false_   
0734                PRINTCHAR_:      
0734   E1                     POP   hl   
0735   7D                     LD   a,L   
0736   CD 85 00               CALL   putchar   
0739   FD E9                  JP   (iy)   
073B                ELSE_:       
073B   2A A0 0C               LD   hl,(vElse)   
073E                ELSE1:       
073E   E5                     PUSH   hl   
073F   FD E9                  JP   (iy)   
0741                EXEC_:       
0741   CD 46 07               CALL   exec1   
0744   FD E9                  JP   (iy)   
0746                EXEC1:       
0746   E1                     POP   hl   
0747   E3                     EX   (SP),hl   
0748   E9                     JP   (hl)   
0749                EDITDEF_:      
0749   CD 99 07               CALL   editDef   
074C   FD E9                  JP   (iy)   
074E                PROMPT_:      
074E   CD 91 03               CALL   prompt   
0751   FD E9                  JP   (iy)   
0753                GO_:         
0753   D1                     POP   de   
0754                GO1:         
0754   7A                     LD   a,D   ; skip if destination address is null
0755   B3                     OR   E   
0756   28 0E                  JR   Z,go3   
0758   60 69                  LD   hl,bc   
075A   03                     INC   bc   ; read next char from source
075B   0A                     LD   a,(bc)   ; if ; to tail call optimise
075C   FE 3B                  CP   ";"   ; by jumping to rather than calling destination
075E   28 03                  JR   Z,go2   
0760   CD B1 03               CALL   rpush   ; save Instruction Pointer
0763                GO2:         
0763   42 4B                  LD   bc,de   
0765   0B                     DEC   bc   
0766                GO3:         
0766   FD E9                  JP   (iy)   
0768                KEY_:        
0768   CD 81 00               CALL   getchar   
076B   26 00                  LD   H,0   
076D   6F                     LD   L,A   
076E   18 CE                  JR   else1   
0770                INPORT_:      
0770   E1                     POP   hl   
0771   79                     LD   a,C   
0772   4D                     LD   C,L   
0773   ED 68                  IN   L,(C)   
0775   26 00                  LD   H,0   
0777   4F                     LD   C,A   
0778   18 C4                  JR   else1   
077A                NEWLN_:      
077A   CD 9A 03               CALL   crlf   
077D   FD E9                  JP   (iy)   
077F                OUTPORT_:      
077F   E1                     POP   hl   
0780   59                     LD   E,C   
0781   4D                     LD   C,L   
0782   E1                     POP   hl   
0783   ED 69                  OUT   (C),L   
0785   4B                     LD   C,E   
0786   FD E9                  JP   (iy)   
0788                TRUEX_:      
0788   C3 EE 03               JP   true_   
078B                UNLIMIT_:      
078B   21 FE FF               LD   hl,-2   
078E   18 AE                  JR   else1   
0790                VARACCESS_:      
0790   21 9E 0C               LD   hl,vPointer   
0793   5E                     LD   e,(hl)   
0794   23                     INC   hl   
0795   56                     LD   d,(hl)   
0796   D5                     PUSH   de   
0797   FD E9                  JP   (iy)   
0799                             ;*******************************************************************
0799                             ; Subroutines
0799                             ;*******************************************************************
0799                EDITDEF:      ; lookup up def based on number
0799   E1                     POP   hl   ; pop ret address
079A   E3                     EX   (SP),hl   ; swap with TOS
079B   7D                     LD   a,L   
079C   08                     EX   AF,AF'   
079D   7D                     LD   a,l   
079E   CD 38 03               CALL   lookupRef0   
07A1   5E                     LD   E,(hl)   
07A2   23                     INC   hl   
07A3   56                     LD   D,(hl)   
07A4   7A                     LD   a,D   
07A5   B3                     OR   E   
07A6   21 00 08               LD   hl,TIB   
07A9   28 14                  JR   Z,editDef3   
07AB   3E 3A                  LD   a,":"   
07AD   CD C7 03               CALL   writeChar   
07B0   08                     EX   AF,AF'   
07B1   CD C7 03               CALL   writeChar   
07B4   18 01                  JR   editDef2   
07B6                EDITDEF1:      
07B6   13                     INC   de   
07B7                EDITDEF2:      
07B7   1A                     LD   a,(de)   
07B8   CD C7 03               CALL   writeChar   
07BB   FE 3B                  CP   ";"   
07BD   20 F7                  JR   NZ,editDef1   
07BF                EDITDEF3:      
07BF   11 00 08               LD   de,TIB   
07C2   B7                     OR   A   
07C3   ED 52                  SBC   hl,de   
07C5   22 7C 0C               LD   (vTIBPtr),hl   
07C8   C9                     RET      
07C9                             ; hl = value
07C9                PRINTDEC:      
07C9   CB 7C                  BIT   7,h   
07CB   28 0B                  JR   z,printDec2   
07CD   3E 2D                  LD   a,"-"   
07CF   CD 85 00               CALL   putchar   
07D2   AF                     XOR   a   
07D3   95                     SUB   l   
07D4   6F                     LD   l,a   
07D5   9F                     SBC   a,a   
07D6   94                     SUB   h   
07D7   67                     LD   h,a   
07D8                PRINTDEC2:      
07D8   C5                     PUSH   bc   
07D9   0E 00                  LD   c,0   ; leading zeros flag = false
07DB   11 F0 D8               LD   de,-10000   
07DE   CD FA 07               CALL   printDec4   
07E1   11 18 FC               LD   de,-1000   
07E4   CD FA 07               CALL   printDec4   
07E7   11 9C FF               LD   de,-100   
07EA   CD FA 07               CALL   printDec4   
07ED   1E F6                  LD   e,-10   
07EF   CD FA 07               CALL   printDec4   
07F2   0C                     INC   c   ; flag = true for at least digit
07F3   1E FF                  LD   e,-1   
07F5   CD FA 07               CALL   printDec4   
07F8   C1                     POP   bc   
07F9   C9                     RET      
07FA                PRINTDEC4:      
07FA   06 2F                  LD   b,"0"-1   
07FC                PRINTDEC5:      
07FC   04                     INC   b   
07FD   19                     ADD   hl,de   
07FE   38 FC                  JR   c,printDec5   
0800   ED 52                  SBC   hl,de   
0802   3E 30                  LD   a,"0"   
0804   B8                     CP   b   
0805   20 05                  JR   nz,printDec6   
0807   AF                     XOR   a   
0808   B1                     OR   c   
0809   C8                     RET   z   
080A   18 01                  JR   printDec7   
080C                PRINTDEC6:      
080C   0C                     INC   c   
080D                PRINTDEC7:      
080D   78                     LD   a,b   
080E   C3 85 00               JP   putchar   
0811                             ;*******************************************************************
0811                             ; Page 5 primitive routines continued
0811                             ;*******************************************************************
0811                DEF:         ; Create a colon definition
0811   03                     INC   bc   
0812   0A                     LD   a,(bc)   ; Get the next character
0813   FE 3A                  CP   ":"   ; is it anonymouse
0815   20 08                  JR   nz,def0   
0817   03                     INC   bc   
0818   ED 5B 76 0C            LD   de,(vHeapPtr)   ; return start of definition
081C   D5                     PUSH   de   
081D   18 0E                  JR   def1   
081F                DEF0:        
081F   32 9A 0C               LD   (vLastDef),a   
0822   CD 38 03               CALL   lookupRef0   
0825   ED 5B 76 0C            LD   de,(vHeapPtr)   ; start of defintion
0829   73                     LD   (hl),E   ; Save low byte of address in CFA
082A   23                     INC   hl   
082B   72                     LD   (hl),D   ; Save high byte of address in CFA+1
082C   03                     INC   bc   
082D                DEF1:        ; Skip to end of definition
082D   0A                     LD   a,(bc)   ; Get the next character
082E   03                     INC   bc   ; Point to next character
082F   12                     LD   (de),A   
0830   13                     INC   de   
0831   FE 3B                  CP   ";"   ; Is it a semicolon
0833   28 02                  JR   Z,def2   ; end the definition
0835   18 F6                  JR   def1   ; get the next element
0837                DEF2:        
0837   0B                     DEC   bc   
0838                DEF3:        
0838   ED 53 76 0C            LD   (vHeapPtr),de   ; bump heap ptr to after definiton
083C   FD E9                  JP   (iy)   
083E                NUM:         
083E   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0841   0A                     LD   a,(bc)   ; Get numeral or -
0842   FE 2D                  CP   "-"   
0844   20 01                  JR   nz,num0   
0846   03                     INC   bc   ; move to next char, no flags affected
0847                NUM0:        
0847   08                     EX   af,af'   ; save zero flag = 0 for later
0848                NUM1:        
0848   0A                     LD   a,(bc)   ; read digit
0849   D6 30                  SUB   "0"   ; less than 0?
084B   38 13                  JR   c,num2   ; not a digit, exit loop
084D   FE 0A                  CP   10   ; greater that 9?
084F   30 0F                  JR   nc,num2   ; not a digit, exit loop
0851   03                     INC   bc   ; inc IP
0852   54 5D                  LD   de,hl   ; multiply hl * 10
0854   29                     ADD   hl,hl   
0855   29                     ADD   hl,hl   
0856   19                     ADD   hl,de   
0857   29                     ADD   hl,hl   
0858   85                     ADD   a,l   ; add digit in a to hl
0859   6F                     LD   l,a   
085A   3E 00                  LD   a,0   
085C   8C                     ADC   a,h   
085D   67                     LD   h,a   
085E   18 E8                  JR   num1   
0860                NUM2:        
0860   0B                     DEC   bc   
0861   08                     EX   af,af'   ; restore zero flag
0862   20 07                  JR   nz,num3   
0864   EB                     EX   de,hl   ; negate the value of hl
0865   21 00 00               LD   hl,0   
0868   B7                     OR   a   ; jump to sub2
0869   ED 52                  SBC   hl,de   
086B                NUM3:        
086B   E5                     PUSH   hl   ; Put the number on the stack
086C   FD E9                  JP   (iy)   ; and process the next character
086E                ARREND:      
086E   ED 43 02 0A            LD   (vTemp1),bc   ; save IP
0872   CD BC 03               CALL   rpop   
0875   22 04 0A               LD   (vTemp2),hl   ; save old SP
0878   54 5D                  LD   de,hl   ; de = hl = old SP
087A   B7                     OR   a   
087B   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
087D   CB 3C                  SRL   h   ; num items = num bytes / 2
087F   CB 1D                  RR   l   
0881   44 4D                  LD   bc,hl   ; bc = count
0883   2A 76 0C               LD   hl,(vHeapPtr)   ; hl = array[-4]
0886   71                     LD   (hl),c   ; write num items in length word
0887   23                     INC   hl   
0888   70                     LD   (hl),b   
0889   23                     INC   hl   ; hl = array[0], bc = count
088A                             ; de = old SP, hl = array[0], bc = count
088A   18 11                  JR   arrayEnd2   
088C                ARRAYEND1:      
088C   0B                     DEC   bc   ; dec items count
088D   1B                     DEC   de   
088E   1B                     DEC   de   
088F   1A                     LD   a,(de)   ; a = lsb of stack item
0890   77                     LD   (hl),a   ; write lsb of array item
0891   23                     INC   hl   ; move to msb of array item
0892   3A 6A 0C               LD   a,(vByteMode)   ; vByteMode=1?
0895   3C                     INC   a   
0896   28 05                  JR   z,arrayEnd2   
0898   13                     INC   de   
0899   1A                     LD   a,(de)   ; a = msb of stack item
089A   1B                     DEC   de   
089B   77                     LD   (hl),a   ; write msb of array item
089C   23                     INC   hl   ; move to next word in array
089D                ARRAYEND2:      
089D   79                     LD   a,c   ; if not zero loop
089E   B0                     OR   b   
089F   20 EB                  JR   nz,arrayEnd1   
08A1   EB                     EX   de,hl   ; de = end of array
08A2   2A 04 0A               LD   hl,(vTemp2)   
08A5   F9                     LD   sp,hl   ; SP = old SP
08A6   2A 76 0C               LD   hl,(vHeapPtr)   ; de = array[-2]
08A9   23                     INC   hl   
08AA   23                     INC   hl   
08AB   E5                     PUSH   hl   ; return array[0]
08AC   ED 53 76 0C            LD   (vHeapPtr),de   ; move heap* to end of array
08B0   ED 4B 02 0A            LD   bc,(vTemp1)   ; restore IP
08B4   C3 F8 03               JP   resetByteMode   
08B7                DIV:         
08B7   60 69                  LD   hl,bc   ; hl = IP
08B9   C1                     POP   bc   ; bc = denominator
08BA   E3                     EX   (sp),hl   ; save IP, hl = numerator
08BB   7C                     LD   a,h   
08BC   A8                     XOR   b   
08BD   F5                     PUSH   af   
08BE   A8                     XOR   b   
08BF   F2 C8 08               JP   p,absbc   
08C2                             ;absHL
08C2   AF                     XOR   a   
08C3   95                     SUB   l   
08C4   6F                     LD   l,a   
08C5   9F                     SBC   a,a   
08C6   94                     SUB   h   
08C7   67                     LD   h,a   
08C8                ABSBC:       
08C8   A8                     XOR   b   
08C9   F2 D2 08               JP   p,$+9   
08CC   AF                     XOR   a   
08CD   91                     SUB   c   
08CE   4F                     LD   c,a   
08CF   9F                     SBC   a,a   
08D0   90                     SUB   b   
08D1   47                     LD   b,a   
08D2   29                     ADD   hl,hl   
08D3   3E 0F                  LD   a,15   
08D5   11 00 00               LD   de,0   
08D8   EB                     EX   de,hl   
08D9   18 04                  JR   jumpin   
08DB                LOOP1:       
08DB   09                     ADD   hl,bc   ;--
08DC                LOOP2:       
08DC   3D                     DEC   a   ;4
08DD   28 0E                  JR   z,EndSDiv   ;12|7
08DF                JUMPIN:      
08DF   CB 23                  SLA   e   ;8
08E1   CB 12                  RL   d   ;8
08E3   ED 6A                  ADC   hl,hl   ;15
08E5   ED 42                  SBC   hl,bc   ;15
08E7   38 F2                  JR   c,Loop1   ;23-2b
08E9   1C                     INC   e   ;--
08EA   C3 DC 08               JP   Loop2   ;--
08ED                ENDSDIV:      
08ED   F1                     POP   af   
08EE   F2 F7 08               JP   p,div10   
08F1   AF                     XOR   a   
08F2   93                     SUB   e   
08F3   5F                     LD   e,a   
08F4   9F                     SBC   a,a   
08F5   92                     SUB   d   
08F6   57                     LD   d,a   
08F7                DIV10:       
08F7   C1                     POP   bc   
08F8                DIVEXIT:      
08F8   D5                     PUSH   de   ; quotient
08F9   22 8A 0C               LD   (vRemain),hl   ; remainder
08FC   FD E9                  JP   (iy)   
08FE                             ; *******************************************************************************
08FE                             ; *********  END OF MAIN   ******************************************************
08FE                             ; *******************************************************************************
08FE                             ; *******************************************************************************
08FE                DSIZE:    EQU   $80   
08FE                RSIZE:    EQU   $80   
08FE                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
08FE                VARS_SIZE:   EQU   26*2   
0800                          .ORG   RAMSTART   
0800                TIB:      DS   TIBSIZE   
0900                          DS   RSIZE   
0980                RSTACK:      
0980                          DS   DSIZE   
0A00                DSTACK:      
0A00                STACK:       
0A00                TBPTR:    DS   2   ; reserved for tests
0A02                VTEMP1:   DS   2   ; 
0A04                VTEMP2:   DS   2   ; 
0A06                RST08:    DS   2   
0A08                RST10:    DS   2   
0A0A                RST18:    DS   2   
0A0C                RST20:    DS   2   
0A0E                RST28:    DS   2   
0A10                RST30:    DS   2   ; 
0A12                BAUD:     DS   2   ; 
0A14                INTVEC:   DS   2   ; 
0A16                NMIVEC:   DS   2   ; 
0A18                GETCVEC:   DS   2   ; 
0A1A                PUTCVEC:   DS   2   ; 
0A1C                          ALIGN   $100   
0B00                OPCODES:      
0B00                          DS   $80-32-1-1   
0B5E                ALTCODES:      
0B5E                          DS   26   
0B78                          ALIGN   $100   
0C00                VARS:     DS   VARS_SIZE   
0C34                DEFS:     DS   VARS_SIZE   
0C68                ALTVARS:      
0C68                          DS   2   ; a
0C6A                VBYTEMODE:   DS   2   ; b
0C6C                VCARRY:   DS   2   ; c carry variable
0C6E                          DS   2   ; d
0C70                          DS   2   ; e
0C72                          DS   2   ; f
0C74                          DS   2   ; g
0C76                VHEAPPTR:   DS   2   ; h heap pointer variable
0C78                          DS   2   ; i loop variable
0C7A                          DS   2   ; j outer loop variable
0C7C                VTIBPTR:   DS   2   ; k address of text input buffer
0C7E                          DS   2   ; l
0C80                          DS   2   ; m
0C82                          DS   2   ; n
0C84                          DS   2   ; o
0C86                          DS   2   ; p
0C88                          DS   2   ; q
0C8A                VREMAIN:   DS   2   ; r remainder of last division
0C8C                VSTKSTART:   DS   2   ; s address of start of stack
0C8E                          DS   2   ; t
0C90                          DS   2   ; u
0C92                          DS   2   ; v
0C94                          DS   2   ; w
0C96                          DS   2   ; x
0C98                          DS   2   ; y
0C9A                VLASTDEF:   DS   2   ; z name of last defined function
0C9C                VBASEPTR:   DS   2   
0C9E                VPOINTER:   DS   2   ; 
0CA0                VELSE:    DS   2   ; 
0CA2                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 44 IN MAIN.asm
RAMSTART:           0800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 6 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 96 IN IOSerial.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 183 IN MAIN.asm
                    > USED AT LINE 1011 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 220 IN MAIN.asm
                    > USED AT LINE 366 IN MAIN.asm
                    > USED AT LINE 426 IN MAIN.asm
                    > USED AT LINE 452 IN MAIN.asm
                    > USED AT LINE 595 IN MAIN.asm
                    > USED AT LINE 696 IN MAIN.asm
                    > USED AT LINE 967 IN MAIN.asm
                    > USED AT LINE 1095 IN MAIN.asm
                    > USED AT LINE 1136 IN MAIN.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 13 IN MAIN.asm
                    > USED AT LINE 475 IN MAIN.asm
FALSE:              0000 DEFINED AT LINE 14 IN MAIN.asm
                    > USED AT LINE 471 IN MAIN.asm
                    > USED AT LINE 899 IN MAIN.asm
UNLIMITED:          00-1 DEFINED AT LINE 15 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 250 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 193 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 190 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 20 IN MAIN.asm
                    > USED AT LINE 199 IN MAIN.asm
CTRL_R:             0012 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 196 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 202 IN MAIN.asm
BSLASH:             005C DEFINED AT LINE 24 IN MAIN.asm
MACROS:             0180 DEFINED AT LINE 50 IN MAIN.asm
REEDIT_:            0180 DEFINED AT LINE 52 IN MAIN.asm
EDIT_:              0185 DEFINED AT LINE 55 IN MAIN.asm
LIST_:              0190 DEFINED AT LINE 58 IN MAIN.asm
PRINTSTACK_:        01A9 DEFINED AT LINE 61 IN MAIN.asm
IOPCODES:           01C4 DEFINED AT LINE 64 IN MAIN.asm
                    > USED AT LINE 299 IN MAIN.asm
IALTCODES:          01EE DEFINED AT LINE 111 IN MAIN.asm
BACKSPACE:          020A DEFINED AT LINE 142 IN MAIN.asm
                    > USED AT LINE 191 IN MAIN.asm
START:              0218 DEFINED AT LINE 151 IN MAIN.asm
                    > USED AT LINE 6
INTERPRET:          022C DEFINED AT LINE 157 IN MAIN.asm
                    > USED AT LINE 277 IN MAIN.asm
INTERPRET2:         0236 DEFINED AT LINE 163 IN MAIN.asm
                    > USED AT LINE 145 IN MAIN.asm
                    > USED AT LINE 149 IN MAIN.asm
                    > USED AT LINE 205 IN MAIN.asm
                    > USED AT LINE 213 IN MAIN.asm
INTERPRET3:         023E DEFINED AT LINE 170 IN MAIN.asm
                    > USED AT LINE 179 IN MAIN.asm
INTERPRET4:         0244 DEFINED AT LINE 176 IN MAIN.asm
                    > USED AT LINE 168 IN MAIN.asm
WAITCHAR:           0249 DEFINED AT LINE 182 IN MAIN.asm
                    > USED AT LINE 222 IN MAIN.asm
                    > USED AT LINE 236 IN MAIN.asm
MACRO:              0278 DEFINED AT LINE 207 IN MAIN.asm
                    > USED AT LINE 195 IN MAIN.asm
                    > USED AT LINE 198 IN MAIN.asm
                    > USED AT LINE 201 IN MAIN.asm
                    > USED AT LINE 204 IN MAIN.asm
WAITCHAR1:          0289 DEFINED AT LINE 215 IN MAIN.asm
                    > USED AT LINE 185 IN MAIN.asm
WAITCHAR3:          0297 DEFINED AT LINE 224 IN MAIN.asm
                    > USED AT LINE 189 IN MAIN.asm
WAITCHAR4:          02AD DEFINED AT LINE 240 IN MAIN.asm
                    > USED AT LINE 187 IN MAIN.asm
NEXT:               02B5 DEFINED AT LINE 245 IN MAIN.asm
                    > USED AT LINE 253 IN MAIN.asm
                    > USED AT LINE 282 IN MAIN.asm
                    > USED AT LINE 609 IN MAIN.asm
EXIT:               02C9 DEFINED AT LINE 260 IN MAIN.asm
                    > USED AT LINE 249 IN MAIN.asm
ETX:                02DD DEFINED AT LINE 271 IN MAIN.asm
                    > USED AT LINE 251 IN MAIN.asm
ETX1:               02E6 DEFINED AT LINE 276 IN MAIN.asm
                    > USED AT LINE 274 IN MAIN.asm
INIT:               02E9 DEFINED AT LINE 279 IN MAIN.asm
                    > USED AT LINE 153 IN MAIN.asm
INITOPS:            0314 DEFINED AT LINE 298 IN MAIN.asm
INITOPS1:           031D DEFINED AT LINE 303 IN MAIN.asm
                    > USED AT LINE 313 IN MAIN.asm
                    > USED AT LINE 324 IN MAIN.asm
INITOPS2:           032D DEFINED AT LINE 315 IN MAIN.asm
                    > USED AT LINE 308 IN MAIN.asm
INITOPS2A:          0332 DEFINED AT LINE 320 IN MAIN.asm
                    > USED AT LINE 323 IN MAIN.asm
LOOKUPREF0:         0338 DEFINED AT LINE 326 IN MAIN.asm
                    > USED AT LINE 584 IN MAIN.asm
                    > USED AT LINE 1063 IN MAIN.asm
                    > USED AT LINE 1153 IN MAIN.asm
LOOKUPREF:          033F DEFINED AT LINE 330 IN MAIN.asm
                    > USED AT LINE 507 IN MAIN.asm
                    > USED AT LINE 755 IN MAIN.asm
LOOKUPREF1:         0341 DEFINED AT LINE 332 IN MAIN.asm
                    > USED AT LINE 329 IN MAIN.asm
PRINTHEX:           034B DEFINED AT LINE 343 IN MAIN.asm
                    > USED AT LINE 600 IN MAIN.asm
PRINTHEX2:          0356 DEFINED AT LINE 352 IN MAIN.asm
                    > USED AT LINE 347 IN MAIN.asm
                    > USED AT LINE 349 IN MAIN.asm
PRINTHEX3:          035F DEFINED AT LINE 360 IN MAIN.asm
                    > USED AT LINE 358 IN MAIN.asm
NESTING:            036A DEFINED AT LINE 378 IN MAIN.asm
                    > USED AT LINE 174 IN MAIN.asm
                    > USED AT LINE 221 IN MAIN.asm
                    > USED AT LINE 847 IN MAIN.asm
NESTING1:           0373 DEFINED AT LINE 385 IN MAIN.asm
                    > USED AT LINE 380 IN MAIN.asm
NESTING2:           0382 DEFINED AT LINE 394 IN MAIN.asm
                    > USED AT LINE 389 IN MAIN.asm
                    > USED AT LINE 391 IN MAIN.asm
NESTING3:           0384 DEFINED AT LINE 397 IN MAIN.asm
                    > USED AT LINE 393 IN MAIN.asm
NESTING4:           038F DEFINED AT LINE 404 IN MAIN.asm
                    > USED AT LINE 399 IN MAIN.asm
                    > USED AT LINE 401 IN MAIN.asm
PROMPT:             0391 DEFINED AT LINE 408 IN MAIN.asm
                    > USED AT LINE 158 IN MAIN.asm
                    > USED AT LINE 989 IN MAIN.asm
CRLF:               039A DEFINED AT LINE 413 IN MAIN.asm
                    > USED AT LINE 233 IN MAIN.asm
                    > USED AT LINE 1026 IN MAIN.asm
PRINTSTR:           03A1 DEFINED AT LINE 418 IN MAIN.asm
                    > USED AT LINE 147 IN MAIN.asm
                    > USED AT LINE 154 IN MAIN.asm
                    > USED AT LINE 409 IN MAIN.asm
                    > USED AT LINE 414 IN MAIN.asm
PUTSTR0:            03A8 DEFINED AT LINE 425 IN MAIN.asm
                    > USED AT LINE 431 IN MAIN.asm
PUTSTR:             03AC DEFINED AT LINE 428 IN MAIN.asm
                    > USED AT LINE 420 IN MAIN.asm
RPUSH:              03B1 DEFINED AT LINE 434 IN MAIN.asm
                    > USED AT LINE 456 IN MAIN.asm
                    > USED AT LINE 458 IN MAIN.asm
                    > USED AT LINE 706 IN MAIN.asm
                    > USED AT LINE 864 IN MAIN.asm
                    > USED AT LINE 867 IN MAIN.asm
                    > USED AT LINE 869 IN MAIN.asm
                    > USED AT LINE 871 IN MAIN.asm
                    > USED AT LINE 1003 IN MAIN.asm
RPOP:               03BC DEFINED AT LINE 441 IN MAIN.asm
                    > USED AT LINE 264 IN MAIN.asm
                    > USED AT LINE 266 IN MAIN.asm
                    > USED AT LINE 621 IN MAIN.asm
                    > USED AT LINE 623 IN MAIN.asm
                    > USED AT LINE 1213 IN MAIN.asm
RPOP2:              03C6 DEFINED AT LINE 446 IN MAIN.asm
WRITECHAR:          03C7 DEFINED AT LINE 449 IN MAIN.asm
                    > USED AT LINE 1072 IN MAIN.asm
                    > USED AT LINE 1074 IN MAIN.asm
                    > USED AT LINE 1080 IN MAIN.asm
ENTER:              03CC DEFINED AT LINE 454 IN MAIN.asm
                    > USED AT LINE 210 IN MAIN.asm
CARRY:              03DF DEFINED AT LINE 464 IN MAIN.asm
                    > USED AT LINE 580 IN MAIN.asm
                    > USED AT LINE 662 IN MAIN.asm
FALSE_:             03E9 DEFINED AT LINE 470 IN MAIN.asm
                    > USED AT LINE 670 IN MAIN.asm
                    > USED AT LINE 685 IN MAIN.asm
                    > USED AT LINE 962 IN MAIN.asm
TRUE_:              03EE DEFINED AT LINE 474 IN MAIN.asm
                    > USED AT LINE 669 IN MAIN.asm
                    > USED AT LINE 684 IN MAIN.asm
                    > USED AT LINE 1039 IN MAIN.asm
TRUE1:              03F1 DEFINED AT LINE 476 IN MAIN.asm
                    > USED AT LINE 472 IN MAIN.asm
SETBYTEMODE:        03F4 DEFINED AT LINE 480 IN MAIN.asm
                    > USED AT LINE 496 IN MAIN.asm
RESETBYTEMODE:      03F8 DEFINED AT LINE 483 IN MAIN.asm
                    > USED AT LINE 519 IN MAIN.asm
                    > USED AT LINE 533 IN MAIN.asm
                    > USED AT LINE 1256 IN MAIN.asm
ASSIGNBYTEMODE:     03F9 DEFINED AT LINE 485 IN MAIN.asm
                    > USED AT LINE 482 IN MAIN.asm
PAGE4:              0400 DEFINED AT LINE 493 IN MAIN.asm
BSLASH_:            0400 DEFINED AT LINE 495 IN MAIN.asm
QUOTE_:             0402 DEFINED AT LINE 498 IN MAIN.asm
AT_:                0403 DEFINED AT LINE 500 IN MAIN.asm
UNDERSCORE_:        0403 DEFINED AT LINE 501 IN MAIN.asm
VAR_:               0405 DEFINED AT LINE 504 IN MAIN.asm
VAR1:               040C DEFINED AT LINE 508 IN MAIN.asm
                    > USED AT LINE 756 IN MAIN.asm
                    > USED AT LINE 763 IN MAIN.asm
                    > USED AT LINE 792 IN MAIN.asm
VAR2:               041A DEFINED AT LINE 517 IN MAIN.asm
                    > USED AT LINE 514 IN MAIN.asm
BANG_:              041D DEFINED AT LINE 521 IN MAIN.asm
ASSIGN:             041D DEFINED AT LINE 522 IN MAIN.asm
ASSIGN1:            042B DEFINED AT LINE 532 IN MAIN.asm
                    > USED AT LINE 529 IN MAIN.asm
AMPER_:             042D DEFINED AT LINE 535 IN MAIN.asm
AND1:               0434 DEFINED AT LINE 543 IN MAIN.asm
                    > USED AT LINE 557 IN MAIN.asm
                    > USED AT LINE 568 IN MAIN.asm
AND2:               0435 DEFINED AT LINE 545 IN MAIN.asm
                    > USED AT LINE 631 IN MAIN.asm
                    > USED AT LINE 639 IN MAIN.asm
                    > USED AT LINE 645 IN MAIN.asm
PIPE_:              0438 DEFINED AT LINE 549 IN MAIN.asm
CARET_:             0441 DEFINED AT LINE 559 IN MAIN.asm
XOR1:               0442 DEFINED AT LINE 561 IN MAIN.asm
                    > USED AT LINE 573 IN MAIN.asm
TILDE_:             044A DEFINED AT LINE 570 IN MAIN.asm
INVERT:             044A DEFINED AT LINE 571 IN MAIN.asm
PLUS_:              044F DEFINED AT LINE 575 IN MAIN.asm
CALL_:              0456 DEFINED AT LINE 582 IN MAIN.asm
DOT_:               0460 DEFINED AT LINE 590 IN MAIN.asm
DOT2:               0464 DEFINED AT LINE 593 IN MAIN.asm
                    > USED AT LINE 601 IN MAIN.asm
COMMA_:             046B DEFINED AT LINE 598 IN MAIN.asm
DQUOTE_:            0471 DEFINED AT LINE 603 IN MAIN.asm
PERCENT_:           0479 DEFINED AT LINE 611 IN MAIN.asm
SEMI_:              0480 DEFINED AT LINE 619 IN MAIN.asm
LBRACE_:            0491 DEFINED AT LINE 628 IN MAIN.asm
RBRACE_:            0495 DEFINED AT LINE 634 IN MAIN.asm
SHR1:               0496 DEFINED AT LINE 636 IN MAIN.asm
                    > USED AT LINE 959 IN MAIN.asm
DOLLAR_:            049C DEFINED AT LINE 642 IN MAIN.asm
MINUS_:             04A0 DEFINED AT LINE 647 IN MAIN.asm
SUB1:               04AC DEFINED AT LINE 655 IN MAIN.asm
                    > USED AT LINE 652 IN MAIN.asm
SUB2:               04AE DEFINED AT LINE 658 IN MAIN.asm
EQ_:                04B5 DEFINED AT LINE 664 IN MAIN.asm
GT_:                04C0 DEFINED AT LINE 672 IN MAIN.asm
LT_:                04C4 DEFINED AT LINE 677 IN MAIN.asm
LT1_:               04C6 DEFINED AT LINE 681 IN MAIN.asm
                    > USED AT LINE 675 IN MAIN.asm
GRAVE_:             04CF DEFINED AT LINE 687 IN MAIN.asm
STR:                04CF DEFINED AT LINE 688 IN MAIN.asm
STR1:               04D0 DEFINED AT LINE 691 IN MAIN.asm
                    > USED AT LINE 697 IN MAIN.asm
STR2:               04DB DEFINED AT LINE 698 IN MAIN.asm
                    > USED AT LINE 695 IN MAIN.asm
LBRACK_:            04DE DEFINED AT LINE 702 IN MAIN.asm
ARRDEF:             04DE DEFINED AT LINE 703 IN MAIN.asm
NUM_:               04E7 DEFINED AT LINE 709 IN MAIN.asm
RPAREN_:            04EA DEFINED AT LINE 711 IN MAIN.asm
RBRACK_:            04ED DEFINED AT LINE 713 IN MAIN.asm
COLON_:             04F0 DEFINED AT LINE 715 IN MAIN.asm
LPAREN_:            04F3 DEFINED AT LINE 717 IN MAIN.asm
QUESTION_:          04F6 DEFINED AT LINE 720 IN MAIN.asm
HASH_:              04F8 DEFINED AT LINE 722 IN MAIN.asm
STAR_:              04FA DEFINED AT LINE 724 IN MAIN.asm
SLASH_:             04FC DEFINED AT LINE 726 IN MAIN.asm
ALT_:               04FC DEFINED AT LINE 728 IN MAIN.asm
ALT:                04FC DEFINED AT LINE 732 IN MAIN.asm
ALT1:               050E DEFINED AT LINE 743 IN MAIN.asm
                    > USED AT LINE 736 IN MAIN.asm
                    > USED AT LINE 740 IN MAIN.asm
ALTVAR:             0512 DEFINED AT LINE 747 IN MAIN.asm
                    > USED AT LINE 738 IN MAIN.asm
LOOPVAR:            0528 DEFINED AT LINE 758 IN MAIN.asm
                    > USED AT LINE 750 IN MAIN.asm
                    > USED AT LINE 753 IN MAIN.asm
COMMENT:            0532 DEFINED AT LINE 765 IN MAIN.asm
                    > USED AT LINE 769 IN MAIN.asm
ALTCODE:            053B DEFINED AT LINE 773 IN MAIN.asm
                    > USED AT LINE 742 IN MAIN.asm
ARRACCESS:          0548 DEFINED AT LINE 783 IN MAIN.asm
                    > USED AT LINE 721 IN MAIN.asm
ARRACCESS1:         0551 DEFINED AT LINE 790 IN MAIN.asm
                    > USED AT LINE 788 IN MAIN.asm
HEX:                0555 DEFINED AT LINE 794 IN MAIN.asm
                    > USED AT LINE 723 IN MAIN.asm
HEX1:               0558 DEFINED AT LINE 796 IN MAIN.asm
                    > USED AT LINE 813 IN MAIN.asm
HEX2:               0561 DEFINED AT LINE 802 IN MAIN.asm
                    > USED AT LINE 800 IN MAIN.asm
MUL:                0574 DEFINED AT LINE 815 IN MAIN.asm
                    > USED AT LINE 725 IN MAIN.asm
MUL1:               057E DEFINED AT LINE 823 IN MAIN.asm
                    > USED AT LINE 833 IN MAIN.asm
MUL2:               058B DEFINED AT LINE 832 IN MAIN.asm
                    > USED AT LINE 827 IN MAIN.asm
                    > USED AT LINE 830 IN MAIN.asm
BEGIN:              0594 DEFINED AT LINE 840 IN MAIN.asm
                    > USED AT LINE 718 IN MAIN.asm
LOOPSTART:          0594 DEFINED AT LINE 841 IN MAIN.asm
LOOPSTART1:         059A DEFINED AT LINE 844 IN MAIN.asm
                    > USED AT LINE 848 IN MAIN.asm
LOOPSTART2:         05AD DEFINED AT LINE 856 IN MAIN.asm
                    > USED AT LINE 852 IN MAIN.asm
LOOPSTART3:         05B6 DEFINED AT LINE 862 IN MAIN.asm
                    > USED AT LINE 860 IN MAIN.asm
LOOPSTART4:         05CC DEFINED AT LINE 872 IN MAIN.asm
                    > USED AT LINE 855 IN MAIN.asm
AGAIN:              05CE DEFINED AT LINE 875 IN MAIN.asm
                    > USED AT LINE 712 IN MAIN.asm
LOOPEND:            05CE DEFINED AT LINE 876 IN MAIN.asm
LOOPEND2:           05E7 DEFINED AT LINE 892 IN MAIN.asm
                    > USED AT LINE 886 IN MAIN.asm
LOOPEND3:           05F4 DEFINED AT LINE 898 IN MAIN.asm
LOOPEND4:           0603 DEFINED AT LINE 904 IN MAIN.asm
                    > USED AT LINE 881 IN MAIN.asm
                    > USED AT LINE 947 IN MAIN.asm
PAGE6:              0700 DEFINED AT LINE 913 IN MAIN.asm
                    > USED AT LINE 779 IN MAIN.asm
ALLOC_:             0700 DEFINED AT LINE 917 IN MAIN.asm
ANOP_:              0709 DEFINED AT LINE 923 IN MAIN.asm
ARRSIZE_:           070B DEFINED AT LINE 928 IN MAIN.asm
ARRSIZE:            070B DEFINED AT LINE 929 IN MAIN.asm
BREAK_:             0713 DEFINED AT LINE 938 IN MAIN.asm
WHILE_:             0713 DEFINED AT LINE 939 IN MAIN.asm
WHILE:              0713 DEFINED AT LINE 940 IN MAIN.asm
WHILE2:             0721 DEFINED AT LINE 948 IN MAIN.asm
                    > USED AT LINE 944 IN MAIN.asm
DEPTH_:             0723 DEFINED AT LINE 951 IN MAIN.asm
DEPTH:              0723 DEFINED AT LINE 952 IN MAIN.asm
FALSEX_:            0731 DEFINED AT LINE 961 IN MAIN.asm
PRINTCHAR_:         0734 DEFINED AT LINE 964 IN MAIN.asm
ELSE_:              073B DEFINED AT LINE 970 IN MAIN.asm
ELSE1:              073E DEFINED AT LINE 972 IN MAIN.asm
                    > USED AT LINE 1014 IN MAIN.asm
                    > USED AT LINE 1023 IN MAIN.asm
                    > USED AT LINE 1043 IN MAIN.asm
EXEC_:              0741 DEFINED AT LINE 976 IN MAIN.asm
EXEC1:              0746 DEFINED AT LINE 979 IN MAIN.asm
                    > USED AT LINE 977 IN MAIN.asm
EDITDEF_:           0749 DEFINED AT LINE 984 IN MAIN.asm
PROMPT_:            074E DEFINED AT LINE 988 IN MAIN.asm
GO_:                0753 DEFINED AT LINE 992 IN MAIN.asm
GO1:                0754 DEFINED AT LINE 994 IN MAIN.asm
                    > USED AT LINE 588 IN MAIN.asm
GO2:                0763 DEFINED AT LINE 1004 IN MAIN.asm
                    > USED AT LINE 1002 IN MAIN.asm
GO3:                0766 DEFINED AT LINE 1007 IN MAIN.asm
                    > USED AT LINE 997 IN MAIN.asm
KEY_:               0768 DEFINED AT LINE 1010 IN MAIN.asm
INPORT_:            0770 DEFINED AT LINE 1016 IN MAIN.asm
NEWLN_:             077A DEFINED AT LINE 1025 IN MAIN.asm
OUTPORT_:           077F DEFINED AT LINE 1029 IN MAIN.asm
TRUEX_:             0788 DEFINED AT LINE 1038 IN MAIN.asm
UNLIMIT_:           078B DEFINED AT LINE 1041 IN MAIN.asm
VARACCESS_:         0790 DEFINED AT LINE 1045 IN MAIN.asm
EDITDEF:            0799 DEFINED AT LINE 1057 IN MAIN.asm
                    > USED AT LINE 985 IN MAIN.asm
EDITDEF1:           07B6 DEFINED AT LINE 1076 IN MAIN.asm
                    > USED AT LINE 1082 IN MAIN.asm
EDITDEF2:           07B7 DEFINED AT LINE 1078 IN MAIN.asm
                    > USED AT LINE 1075 IN MAIN.asm
EDITDEF3:           07BF DEFINED AT LINE 1083 IN MAIN.asm
                    > USED AT LINE 1070 IN MAIN.asm
PRINTDEC:           07C9 DEFINED AT LINE 1091 IN MAIN.asm
                    > USED AT LINE 592 IN MAIN.asm
PRINTDEC2:          07D8 DEFINED AT LINE 1102 IN MAIN.asm
                    > USED AT LINE 1093 IN MAIN.asm
PRINTDEC4:          07FA DEFINED AT LINE 1118 IN MAIN.asm
                    > USED AT LINE 1106 IN MAIN.asm
                    > USED AT LINE 1108 IN MAIN.asm
                    > USED AT LINE 1110 IN MAIN.asm
                    > USED AT LINE 1112 IN MAIN.asm
                    > USED AT LINE 1115 IN MAIN.asm
PRINTDEC5:          07FC DEFINED AT LINE 1120 IN MAIN.asm
                    > USED AT LINE 1123 IN MAIN.asm
PRINTDEC6:          080C DEFINED AT LINE 1132 IN MAIN.asm
                    > USED AT LINE 1127 IN MAIN.asm
PRINTDEC7:          080D DEFINED AT LINE 1134 IN MAIN.asm
                    > USED AT LINE 1131 IN MAIN.asm
DEF:                0811 DEFINED AT LINE 1142 IN MAIN.asm
                    > USED AT LINE 716 IN MAIN.asm
DEF0:               081F DEFINED AT LINE 1151 IN MAIN.asm
                    > USED AT LINE 1146 IN MAIN.asm
DEF1:               082D DEFINED AT LINE 1159 IN MAIN.asm
                    > USED AT LINE 1150 IN MAIN.asm
                    > USED AT LINE 1166 IN MAIN.asm
DEF2:               0837 DEFINED AT LINE 1167 IN MAIN.asm
                    > USED AT LINE 1165 IN MAIN.asm
DEF3:               0838 DEFINED AT LINE 1169 IN MAIN.asm
NUM:                083E DEFINED AT LINE 1173 IN MAIN.asm
                    > USED AT LINE 654 IN MAIN.asm
                    > USED AT LINE 710 IN MAIN.asm
NUM0:               0847 DEFINED AT LINE 1179 IN MAIN.asm
                    > USED AT LINE 1177 IN MAIN.asm
NUM1:               0848 DEFINED AT LINE 1181 IN MAIN.asm
                    > USED AT LINE 1198 IN MAIN.asm
NUM2:               0860 DEFINED AT LINE 1199 IN MAIN.asm
                    > USED AT LINE 804 IN MAIN.asm
                    > USED AT LINE 806 IN MAIN.asm
                    > USED AT LINE 1184 IN MAIN.asm
                    > USED AT LINE 1186 IN MAIN.asm
NUM3:               086B DEFINED AT LINE 1207 IN MAIN.asm
                    > USED AT LINE 1202 IN MAIN.asm
ARREND:             086E DEFINED AT LINE 1211 IN MAIN.asm
                    > USED AT LINE 714 IN MAIN.asm
ARRAYEND1:          088C DEFINED AT LINE 1228 IN MAIN.asm
                    > USED AT LINE 1246 IN MAIN.asm
ARRAYEND2:          089D DEFINED AT LINE 1243 IN MAIN.asm
                    > USED AT LINE 1227 IN MAIN.asm
                    > USED AT LINE 1237 IN MAIN.asm
DIV:                08B7 DEFINED AT LINE 1258 IN MAIN.asm
                    > USED AT LINE 745 IN MAIN.asm
ABSBC:              08C8 DEFINED AT LINE 1274 IN MAIN.asm
                    > USED AT LINE 1266 IN MAIN.asm
LOOP1:              08DB DEFINED AT LINE 1288 IN MAIN.asm
                    > USED AT LINE 1298 IN MAIN.asm
LOOP2:              08DC DEFINED AT LINE 1290 IN MAIN.asm
                    > USED AT LINE 1300 IN MAIN.asm
JUMPIN:             08DF DEFINED AT LINE 1293 IN MAIN.asm
                    > USED AT LINE 1287 IN MAIN.asm
ENDSDIV:            08ED DEFINED AT LINE 1301 IN MAIN.asm
                    > USED AT LINE 1292 IN MAIN.asm
DIV10:              08F7 DEFINED AT LINE 1310 IN MAIN.asm
                    > USED AT LINE 1303 IN MAIN.asm
DIVEXIT:            08F8 DEFINED AT LINE 1312 IN MAIN.asm
                    > USED AT LINE 838 IN MAIN.asm
DSIZE:              0080 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
RSIZE:              0080 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 8 IN ram.asm
VARS_SIZE:          0034 DEFINED AT LINE 4 IN ram.asm
                    > USED AT LINE 288 IN MAIN.asm
                    > USED AT LINE 40 IN ram.asm
                    > USED AT LINE 41 IN ram.asm
TIB:                0800 DEFINED AT LINE 8 IN ram.asm
                    > USED AT LINE 167 IN MAIN.asm
                    > USED AT LINE 216 IN MAIN.asm
                    > USED AT LINE 225 IN MAIN.asm
                    > USED AT LINE 242 IN MAIN.asm
                    > USED AT LINE 1069 IN MAIN.asm
                    > USED AT LINE 1084 IN MAIN.asm
RSTACK:             0980 DEFINED AT LINE 11 IN ram.asm
                    > USED AT LINE 280 IN MAIN.asm
DSTACK:             0A00 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 152 IN MAIN.asm
                    > USED AT LINE 272 IN MAIN.asm
                    > USED AT LINE 275 IN MAIN.asm
                    > USED AT LINE 291 IN MAIN.asm
                    > USED AT LINE 956 IN MAIN.asm
STACK:              0A00 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
TBPTR:              0A00 DEFINED AT LINE 16 IN ram.asm
VTEMP1:             0A02 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 842 IN MAIN.asm
                    > USED AT LINE 866 IN MAIN.asm
                    > USED AT LINE 1212 IN MAIN.asm
                    > USED AT LINE 1255 IN MAIN.asm
VTEMP2:             0A04 DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 1214 IN MAIN.asm
                    > USED AT LINE 1248 IN MAIN.asm
RST08:              0A06 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              0A08 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              0A0A DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              0A0C DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              0A0E DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              0A10 DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               0A12 DEFINED AT LINE 26 IN ram.asm
INTVEC:             0A14 DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             0A16 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            0A18 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            0A1A DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
OPCODES:            0B00 DEFINED AT LINE 33 IN ram.asm
                    > USED AT LINE 300 IN MAIN.asm
ALTCODES:           0B5E DEFINED AT LINE 35 IN ram.asm
                    > USED AT LINE 774 IN MAIN.asm
VARS:               0C00 DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 284 IN MAIN.asm
                    > USED AT LINE 506 IN MAIN.asm
DEFS:               0C34 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 327 IN MAIN.asm
ALTVARS:            0C68 DEFINED AT LINE 43 IN ram.asm
                    > USED AT LINE 754 IN MAIN.asm
VBYTEMODE:          0C6A DEFINED AT LINE 45 IN ram.asm
                    > USED AT LINE 486 IN MAIN.asm
                    > USED AT LINE 512 IN MAIN.asm
                    > USED AT LINE 527 IN MAIN.asm
                    > USED AT LINE 786 IN MAIN.asm
                    > USED AT LINE 1235 IN MAIN.asm
VCARRY:             0C6C DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 467 IN MAIN.asm
VHEAPPTR:           0C76 DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 296 IN MAIN.asm
                    > USED AT LINE 919 IN MAIN.asm
                    > USED AT LINE 922 IN MAIN.asm
                    > USED AT LINE 1148 IN MAIN.asm
                    > USED AT LINE 1154 IN MAIN.asm
                    > USED AT LINE 1170 IN MAIN.asm
                    > USED AT LINE 1221 IN MAIN.asm
                    > USED AT LINE 1250 IN MAIN.asm
                    > USED AT LINE 1254 IN MAIN.asm
VTIBPTR:            0C7C DEFINED AT LINE 54 IN ram.asm
                    > USED AT LINE 161 IN MAIN.asm
                    > USED AT LINE 208 IN MAIN.asm
                    > USED AT LINE 212 IN MAIN.asm
                    > USED AT LINE 241 IN MAIN.asm
                    > USED AT LINE 1087 IN MAIN.asm
VREMAIN:            0C8A DEFINED AT LINE 61 IN ram.asm
                    > USED AT LINE 1314 IN MAIN.asm
VSTKSTART:          0C8C DEFINED AT LINE 62 IN ram.asm
                    > USED AT LINE 292 IN MAIN.asm
VLASTDEF:           0C9A DEFINED AT LINE 69 IN ram.asm
                    > USED AT LINE 294 IN MAIN.asm
                    > USED AT LINE 1152 IN MAIN.asm
VBASEPTR:           0C9C DEFINED AT LINE 71 IN ram.asm
                    > USED AT LINE 263 IN MAIN.asm
                    > USED AT LINE 265 IN MAIN.asm
                    > USED AT LINE 281 IN MAIN.asm
                    > USED AT LINE 457 IN MAIN.asm
                    > USED AT LINE 459 IN MAIN.asm
                    > USED AT LINE 620 IN MAIN.asm
                    > USED AT LINE 622 IN MAIN.asm
VPOINTER:           0C9E DEFINED AT LINE 72 IN ram.asm
                    > USED AT LINE 509 IN MAIN.asm
                    > USED AT LINE 525 IN MAIN.asm
                    > USED AT LINE 1046 IN MAIN.asm
VELSE:              0CA0 DEFINED AT LINE 73 IN ram.asm
                    > USED AT LINE 854 IN MAIN.asm
                    > USED AT LINE 900 IN MAIN.asm
                    > USED AT LINE 971 IN MAIN.asm
HEAP:               0CA2 DEFINED AT LINE 75 IN ram.asm
                    > USED AT LINE 295 IN MAIN.asm
